import { ChannelType, PermissionFlagsBits, PermissionsBitField } from 'discord.js';

export async function createRoles(guild) {
  const roles = {
    admin: await guild.roles.create({ name: 'üëë Admin', color: 'RED', permissions: [PermissionFlagsBits.Administrator] }),
    moderator: await guild.roles.create({ name: 'üõ°Ô∏è Moderator', color: 'BLUE', permissions: [PermissionFlagsBits.ManageMessages, PermissionFlagsBits.KickMembers, PermissionFlagsBits.BanMembers] }),
    member: await guild.roles.create({ name: 'üåü Member', color: 'GREEN' }),
    guest: await guild.roles.create({ name: 'üëã Guest', color: 'GREY' }),
    eventOrganizer: await guild.roles.create({ name: 'üìÖ Event Organizer', color: 'PURPLE' }),
    gameStrategist: await guild.roles.create({ name: 'üß† Game Strategist', color: 'ORANGE' }),
    contentCreator: await guild.roles.create({ name: 'üé• Content Creator', color: 'YELLOW' }),
    communityHelper: await guild.roles.create({ name: 'ü§ù Community Helper', color: 'AQUA' }),
    vip: await guild.roles.create({ name: '‚ú® VIP', color: 'GOLD' }),
    analyst: await guild.roles.create({ name: 'üìä Analyst', color: 'DARK_BLUE' }),
  };

  console.log("Roles created successfully!");
  return roles;
}

export async function createChannels(guild, roles) {
  const categories = {
    info: await guild.channels.create({ name: 'üìò‚îÉInformation', type: ChannelType.GuildCategory }),
    general: await guild.channels.create({ name: 'üí¨‚îÉGeneral', type: ChannelType.GuildCategory }),
    leaderboards: await guild.channels.create({ name: 'üèÜ‚îÉLeaderboards', type: ChannelType.GuildCategory }),
    discussions: await guild.channels.create({ name: 'üéÆ‚îÉDiscussions', type: ChannelType.GuildCategory }),
    support: await guild.channels.create({ name: '‚ùì‚îÉSupport', type: ChannelType.GuildCategory }),
    voice: await guild.channels.create({ name: 'üîä‚îÉVoice Channels', type: ChannelType.GuildCategory }),
  };

  const channels = {
    welcome: await guild.channels.create({ name: 'üëã‚îÉwelcome', type: ChannelType.GuildText, parent: categories.info }),
    rules: await guild.channels.create({ name: 'üìú‚îÉrules', type: ChannelType.GuildText, parent: categories.info }),
    announcements: await guild.channels.create({ name: 'üì¢‚îÉannouncements', type: ChannelType.GuildText, parent: categories.info }),
    botLogs: await guild.channels.create({ name: 'ü§ñ‚îÉbot-logs', type: ChannelType.GuildText, parent: categories.info }),
    general: await guild.channels.create({ name: 'üí¨‚îÉgeneral', type: ChannelType.GuildText, parent: categories.general }),
    offTopic: await guild.channels.create({ name: 'üé≤‚îÉoff-topic', type: ChannelType.GuildText, parent: categories.general }),
    memberLeaderboard: await guild.channels.create({ name: 'üèÖ‚îÉmember-leaderboard', type: ChannelType.GuildText, parent: categories.leaderboards }),
    clips: await guild.channels.create({ name: 'üé¨‚îÉclips', type: ChannelType.GuildText, parent: categories.general }),
    suggestions: await guild.channels.create({ name: 'üí°‚îÉsuggestions', type: ChannelType.GuildText, parent: categories.support }),
    generalVoice: await guild.channels.create({ name: 'üîä‚îÉGeneral Voice', type: ChannelType.GuildVoice, parent: categories.voice }),
    squad1: await guild.channels.create({ name: 'üéÆ‚îÉSquad 1', type: ChannelType.GuildVoice, parent: categories.voice }),
    squad2: await guild.channels.create({ name: 'üéÆ‚îÉSquad 2', type: ChannelType.GuildVoice, parent: categories.voice }),
  };

  console.log("Channels and categories created successfully!");
  return { channels, categories };
}

// Reaction-based Role Picker
export async function setupRolePicker(guild, roles, botLogsChannel) {
  const roleChannel = await guild.channels.create({
    name: 'üé≠‚îÉrole-picker',
    type: ChannelType.GuildText,
    topic: 'React to this message to pick your roles!',
  });

  const roleMessage = await roleChannel.send(`
üåü **React below to pick your roles!**
üìÖ - Event Organizer
üß† - Game Strategist
üé• - Content Creator
ü§ù - Community Helper
‚ú® - VIP
`);

  await roleMessage.react('üìÖ'); // Event Organizer
  await roleMessage.react('üß†'); // Game Strategist
  await roleMessage.react('üé•'); // Content Creator
  await roleMessage.react('ü§ù'); // Community Helper
  await roleMessage.react('‚ú®'); // VIP

  const collector = roleMessage.createReactionCollector({ dispose: true });

  collector.on('collect', async (reaction, user) => {
    const member = await guild.members.fetch(user.id);
    switch (reaction.emoji.name) {
      case 'üìÖ': member.roles.add(roles.eventOrganizer); break;
      case 'üß†': member.roles.add(roles.gameStrategist); break;
      case 'üé•': member.roles.add(roles.contentCreator); break;
      case 'ü§ù': member.roles.add(roles.communityHelper); break;
      case '‚ú®': member.roles.add(roles.vip); break;
    }
    botLogsChannel.send(`‚úÖ ${user.tag} was given a role via role picker.`);
  });

  console.log("Role picker setup completed!");
}

// Audit Log Functionality
export async function logAudit(guild, botLogsChannel) {
  guild.on('roleCreate', (role) => botLogsChannel.send(`üÜï Role Created: **${role.name}**`));
  guild.on('roleDelete', (role) => botLogsChannel.send(`‚ùå Role Deleted: **${role.name}**`));
  guild.on('channelCreate', (channel) => botLogsChannel.send(`üÜï Channel Created: **${channel.name}**`));
  guild.on('channelDelete', (channel) => botLogsChannel.send(`‚ùå Channel Deleted: **${channel.name}**`));
  console.log("Audit logging active.");
}

